line 1: '/*\n'
line 2: ' * File: i2c_adapter_rpi.cpp\n'
line 3: ' * Author: Sonny Sung\n'
line 4: ' * Contact: sonny.sung.cs [@T] gmail [DOT] com\n'
line 5: ' * \n'
line 6: ' * Created: June, 27, 2013\n'
line 7: ' * \n'
line 8: ' * Description:\n'
line 9: ' * I2C Adapter for the Raspberry Pi.\n'
line 10: ' * Based class off of i2c_adapter.h\n'
line 11: ' * Manages read and write operations on the RPI.\n'
line 12: ' * Uses the wiringPi library developed by Drogon, http://wiringpi.com/.\n'
line 13: " * Singleton class and relatively thread safe using pthread's mutex (not fully tested).\n"
line 14: ' */\n'
line 15: '#include "i2c_adapter_rpi.h"\n'
line 16: '#include <time.h>\n'
line 17: '#include <string.h>\n'
line 18: '\n'
line 19: 'static uint16_t crc_table [256] = {\n'
line 20: '\n'
line 21: '0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5,\n'
line 22: '0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b,\n'
line 23: '0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210,\n'
line 24: '0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,\n'
line 25: '0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c,\n'
line 26: '0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401,\n'
line 27: '0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b,\n'
line 28: '0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,\n'
line 29: '0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6,\n'
line 30: '0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738,\n'
line 31: '0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5,\n'
line 32: '0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\n'
line 33: '0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969,\n'
line 34: '0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96,\n'
line 35: '0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc,\n'
line 36: '0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,\n'
line 37: '0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03,\n'
line 38: '0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd,\n'
line 39: '0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6,\n'
line 40: '0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,\n'
line 41: '0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a,\n'
line 42: '0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb,\n'
line 43: '0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1,\n'
line 44: '0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\n'
line 45: '0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c,\n'
line 46: '0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2,\n'
line 47: '0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb,\n'
line 48: '0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,\n'
line 49: '0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447,\n'
line 50: '0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8,\n'
line 51: '0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2,\n'
line 52: '0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,\n'
line 53: '0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9,\n'
line 54: '0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827,\n'
line 55: '0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c,\n'
line 56: '0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\n'
line 57: '0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0,\n'
line 58: '0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d,\n'
line 59: '0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07,\n'
line 60: '0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,\n'
line 61: '0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba,\n'
line 62: '0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,\n'
line 63: '0x2e93, 0x3eb2, 0x0ed1, 0x1ef0\n'
line 64: '};\n'
line 65: '\n'
line 66: 'I2C_Adapter_RPI* I2C_Adapter_RPI::smInstance = NULL;\n'
line 67: 'pthread_mutex_t I2C_Adapter_RPI::smMutex = PTHREAD_MUTEX_INITIALIZER;\n'
line 68: 'pthread_mutex_t I2C_Adapter_RPI::aMutex = PTHREAD_MUTEX_INITIALIZER;\n'
line 69: 'pthread_mutex_t I2C_Adapter_RPI::rwMutex = PTHREAD_MUTEX_INITIALIZER;\n'
line 70: 'bool I2C_Adapter_RPI::debug_mode = true;\n'
line 71: '\n'
line 72: 'I2C_Adapter_RPI::I2C_Adapter_RPI(){\n'
line 73: '\tfor (int i = 0; i < 128; i++) {\n'
line 74: '\t\tfd[i] = -1;\n'
line 75: '\t}\t\n'
line 76: '}\n'
line 77: '\n'
line 78: 'I2C_Adapter_RPI* I2C_Adapter_RPI::getInstance(){ \n'
line 79: '\t\n'
line 80: '\tpthread_mutex_lock(&smMutex);\t//Get lock on getInstance mutex\n'
line 81: '\t\n'
line 82: '\tif (smInstance == NULL){\n'
line 83: '\t\t\n'
line 84: '\t\tsmInstance = new I2C_Adapter_RPI();\n'
line 85: '\t}\n'
line 86: '\t\n'
line 87: '\tpthread_mutex_unlock(&smMutex);\t//Release lock on getInstance mutex\n'
line 88: '\t\n'
line 89: '\treturn smInstance;\n'
line 90: '}\n'
line 91: '\n'
line 92: 'void I2C_Adapter_RPI::setDebug(bool b){\n'
line 93: '\tI2C_Adapter_RPI::debug_mode = b;\n'
line 94: '}\n'
line 95: '\n'
line 96: 'bool I2C_Adapter_RPI::attach_fd(uint8_t addr){\n'
line 97: '\tif((0 <= addr) & (addr < 128)){\n'
line 98: '\t\t\n'
line 99: '\t\tpthread_mutex_lock(&aMutex);\t\t\t//Lock mutex for address acquire\n'
line 100: '\t\t\n'
line 101: '\t\tfd[addr] = wiringPiI2CSetup(addr);\n'
line 102: '\t\t\n'
line 103: '\t\tpthread_mutex_unlock(&aMutex);\t\t\t//Unlock mutex for address acquire\n'
line 104: '\t\t\n'
line 105: '\t\tif(fd[addr] == -1){\n'
line 106: '\t\t\tif(debug_mode){\n'
line 107: '\t\t\t\tprintf("Couldn\'t get device %u fd.\\n", addr);\n'
line 108: '\t\t\t}\n'
line 109: '\t\t\treturn true;\n'
line 110: '\t\t}\n'
line 111: '\t\telse{\n'
line 112: '\t\t\tif(debug_mode){\n'
line 113: '\t\t\t\tprintf("Got device %u fd.\\n", addr);\n'
line 114: '\t\t\t}\n'
line 115: '\t\t\treturn false;\n'
line 116: '\t\t}\n'
line 117: '\t}\t\n'
line 118: '\telse{\n'
line 119: '\t\tif(debug_mode){\n'
line 120: '\t\t\tprintf("Address %u is out of I2C range.\\n", addr);\n'
line 121: '\t\t}\n'
line 122: '\t\treturn false;\n'
line 123: '\t}\n'
line 124: '}\n'
line 125: '\n'
line 126: '\n'
line 127: 'void I2C_Adapter_RPI::checksum(unsigned char *d, uint8_t length, unsigned char *cs )\n'
line 128: '{ \n'
line 129: '   unsigned int count;\n'
line 130: '   unsigned int crc = 0xffff;\n'
line 131: '   unsigned int temp;\n'
line 132: '\n'
line 133: '   for (count = 0; count < length; ++count)\n'
line 134: '   {\n'
line 135: '     temp = (*d++ ^ (crc >> 8)) & 0xff;\n'
line 136: '     crc = crc_table[temp] ^ (crc << 8);\n'
line 137: '   }\n'
line 138: '   \n'
line 139: '   crc = (crc ^ 0x0000);\n'
line 140: '   \n'
line 141: '   cs[0] = (crc >> 8 ) & 0xFF;\n'
line 142: '   cs[1] = crc & 0xFF;\n'
line 143: '   \n'
line 144: '   //printf("CRC: 0x%02x 0x%02x\\n", cs[0], cs[1]);\n'
line 145: '   \n'
line 146: '   return;\n'
line 147: '} \n'
line 148: '\n'
line 149: '\t\t\t\n'
line 150: 'int I2C_Adapter_RPI::writeI2C(uint8_t addr, unsigned char *w, uint8_t count){\t\n'
line 151: '\tunsigned char checksum_array[2];\n'
line 152: '\t\n'
line 153: '\tthis->checksum(w, count, checksum_array);\n'
line 154: '\t\n'
line 155: '\tunsigned char checksum[2];\n'
line 156: '\t\n'
line 157: '\tuint8_t write_attempts = 0;\n'
line 158: '\t\n'
line 159: '\twhile(1){\n'
line 160: '\t\tthis->writeReadI2C(addr, w, count, checksum, 2);\n'
line 161: '\t\t\n'
line 162: '\t\tif( (checksum[0] == checksum_array[0]) & (checksum[1] == checksum_array[1]) ){\n'
line 163: '\t\t\treturn count;\n'
line 164: '\t\t}\n'
line 165: '\t\telse if(write_attempts > ATTEMPTS){\n'
line 166: '\t\t\terrorNum ++;\n'
line 167: '\t\t\tprintf("Error: Packet#%u CRC check failed -- max(5) attempts reached... giving up!\\n", packetNum);\n'
line 168: '\t\t\treturn 0;\n'
line 169: '\t\t}\n'
line 170: '\t\terrorNum ++;\n'
line 171: '\t\twrite_attempts ++;\n'
line 172: '\t\tprintf("Error: P#%u CRC check failed -- attempt %d. I2C error rate: %f\\n", packetNum, write_attempts, 100*((float)errorNum / (float)packetNum));\n'
line 173: '\t\t\n'
line 174: '\t}\n'
line 175: '}\n'
line 176: '\n'
line 177: 'int I2C_Adapter_RPI::writeI2C_no_checksum(uint8_t addr, unsigned char *w, uint8_t count){\n'
line 178: '\tpthread_mutex_lock(&rwMutex); \t//Lock readwrite mutex\n'
line 179: '\tpacketNum++;\n'
line 180: '\t\n'
line 181: '\tif(fd[addr] == -1)\n'
line 182: '\t\tattach_fd(addr);\n'
line 183: '\n'
line 184: '\tif(debug_mode){\n'
line 185: '\t\tprintf("Write(0x%02x) P#%u: ", addr, packetNum);\n'
line 186: '\t\tfor(int i = 0; i< count; i++){\n'
line 187: '\t\t\tprintf("0x%02x ", w[i]);\n'
line 188: '\t\t}\t\n'
line 189: '\t\tprintf("\\n");\n'
line 190: '\t}\n'
line 191: '\t\n'
line 192: '\tint ret = write(fd[addr], w, count);\t\n'
line 193: '\tpthread_mutex_unlock(&rwMutex); \t//Unlock readwrite mutex\n'
line 194: '\t\n'
line 195: '\treturn ret;\t//Returns the number of bytes written\n'
line 196: '}\n'
line 197: '\n'
line 198: 'int I2C_Adapter_RPI::readI2C(uint8_t addr, unsigned char *r, uint8_t count){\n'
line 199: '\tpthread_mutex_lock(&rwMutex); \t//Lock readwrite mutex\n'
line 200: '\tpacketNum++;\n'
line 201: '\t\n'
line 202: '\tif(fd[addr] == -1)\n'
line 203: '\t\tattach_fd(addr);\n'
line 204: '\t\t\n'
line 205: '\tint ret = read(fd[addr], r, count);\n'
line 206: '\t\n'
line 207: '\tif(debug_mode){\n'
line 208: '\t\tprintf("Read (0x%02x) P#%u: ", addr, packetNum);\t\n'
line 209: '\t\tfor(int i = 0; i< count; i++){\n'
line 210: '\t\t\tprintf("0x%02x ", r[i]);\n'
line 211: '\t\t}\t\n'
line 212: '\t\tprintf("\\n");\n'
line 213: '\t}\n'
line 214: '\tpthread_mutex_unlock(&rwMutex); \t//Unlock readwrite mutex\n'
line 215: '\t\n'
line 216: '\treturn ret;\t//Returns the number of bytes read\n'
line 217: '}\n'
line 218: '\n'
line 219: 'int I2C_Adapter_RPI::writeReadI2C(uint8_t addr, unsigned char *w, uint8_t wcount, unsigned char *r, uint8_t rcount, unsigned int readDelay){\t\n'
line 220: '\tpthread_mutex_lock(&rwMutex); \t//Lock readwrite mutex\n'
line 221: '\tpacketNum++;\n'
line 222: '\t\n'
line 223: '\tif(fd[addr] == -1){\n'
line 224: '\t\tattach_fd(addr);\n'
line 225: '\t}\n'
line 226: '\t\n'
line 227: '\tif(debug_mode){\n'
line 228: '\t\tprintf("Write(0x%02x) P#%u: ", addr, packetNum);\n'
line 229: '\t\tfor(int i = 0; i< wcount; i++){\n'
line 230: '\t\t\tprintf("0x%02x ", w[i]);\n'
line 231: '\t\t}\n'
line 232: '\t\tprintf("\\n");\n'
line 233: '\t}\n'
line 234: '\n'
line 235: '\twrite(fd[addr], w, wcount);\n'
line 236: '\t\n'
line 237: '\tif(readDelay != 0)\t\t\t\t//Sets a delay between the write and read. Useful if the device needs to prepare data\n'
line 238: '\t\tusleep(readDelay);\t\t//Delays in milliseconds, BE CAREFUL WHEN USING: delay will hold the i2c bus until that duration is over\n'
line 239: '\t\n'
line 240: '\tint ret = read(fd[addr], r, rcount);\n'
line 241: '\t\n'
line 242: '\tif(debug_mode){\n'
line 243: '\t\tprintf("Read (0x%02x) P#%u: ", addr, packetNum);\t\n'
line 244: '\t\tfor(int i = 0; i< rcount; i++){\n'
line 245: '\t\t\tprintf("0x%02x ", r[i]);\n'
line 246: '\t\t}\t\n'
line 247: '\t\tprintf("\\n");\n'
line 248: '\t}\n'
line 249: '\t\t\n'
line 250: '\tpthread_mutex_unlock(&rwMutex); \t//Unlock readwrite mutex\n'
line 251: '\t\n'
line 252: '\treturn ret;\t//Returns the number of bytes written\n'
line 253: '\t\n'
line 254: '}\n'
line 255: '\n'
line 256: 'int I2C_Adapter_RPI::writeReadI2C_checksum(uint8_t addr, unsigned char *w, uint8_t wcount, unsigned char *r, uint8_t rcount, unsigned int readDelay){\t\n'
line 257: '\tunsigned char checksum_array[2];\n'
line 258: '\t\n'
line 259: '\tthis->checksum(w, wcount, checksum_array);\n'
line 260: '\t\n'
line 261: '\tunsigned char* r_checksum = new unsigned char[rcount + 2];\n'
line 262: '\t\n'
line 263: '\tuint8_t write_attempts = 0;\n'
line 264: '\t\n'
line 265: '\twhile(1){\n'
line 266: '\t\tthis->writeReadI2C(addr, w, wcount, r_checksum, rcount + 2, readDelay);\n'
line 267: '\t\t\n'
line 268: '\t\tif( (r_checksum[rcount] == checksum_array[0]) & (r_checksum[rcount+1] == checksum_array[1]) ){\n'
line 269: '\t\t\t//memcpy( r, r_checksum, rcount * sizeof(unsigned char) );\n'
line 270: '\t\t\tfor(int i = 0; i < rcount; i ++){\n'
line 271: '\t\t\t\tr[i] = r_checksum[i];\n'
line 272: '\t\t\t}\n'
line 273: '\t\t\treturn rcount;\n'
line 274: '\t\t}\n'
line 275: '\t\telse if(write_attempts > ATTEMPTS){\n'
line 276: '\t\t\terrorNum ++;\n'
line 277: '\t\t\tprintf("Error: Packet#%u CRC check failed -- max(5) attempts reached... giving up!\\n", packetNum);\n'
line 278: '\t\t\treturn 0;\n'
line 279: '\t\t}\n'
line 280: '\t\terrorNum ++;\n'
line 281: '\t\twrite_attempts ++;\n'
line 282: '\t\tprintf("Error: P#%u CRC check failed -- attempt %d. I2C error rate: %f\\n", packetNum, write_attempts, 100*((float)errorNum / (float)packetNum));\n'
line 283: '\t\t\n'
line 284: '\t}\n'
line 285: '}\n'
line 286: '\n'
